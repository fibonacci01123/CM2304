/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



package msettings;

/**
 *
 * @author Leatile(Admin Details,Notifications) & Letsibogo(Manage Staff)
 */
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class msettingsUI extends javax.swing.JFrame {
    
    private String name,lastName,UserID,telephoneNumber,email,password; 
    
    //array list to store row details for 'edit staff details' code
    ArrayList<String> rowDetails ;
    
    byte nextState=0;
    boolean [] flags;
    String filePath;
    /**
     * Creates new form msettingsUI
     */
          
    public msettingsUI()
    {
        initComponents();
        myInitComponents();
        populateTable();

      /**reads lines from file,splits and assigns to  initial variables 
       * 
       */
        filePath="users.txt";
      try
        {
            
            flags= new boolean[5];
            Arrays.fill(flags, true);
            
            DatabaseChangeUserInfo DB=new DatabaseChangeUserInfo(filePath);     
            String [] string=DB.readAndGetLine(filePath).split(",");
            name=string[0];
            lastName=string[1];
            UserID=string[4];
            telephoneNumber=string[3];
            email=string[2];
            password=string[5];
            
            firstNameField.setText(name);
            lastNameField.setText(lastName);
            UserIDField.setText(UserID);
            telephoneNumberField.setText(telephoneNumber);
            emailField.setText(email);
            CurrentPasswordField.setText(password);
            ReEnterPasswordField.setText("");
            EnterNewPasswordField.setText("");
            
        }
        catch(Exception e)
        {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        notificatiionsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        mainMenuButtonNotification = new javax.swing.JButton();
        logOutNotification = new javax.swing.JButton();
        accountDetailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        UserIDField = new javax.swing.JTextField();
        telephoneNumberField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        saveChangesButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        EnterNewPasswordField = new javax.swing.JPasswordField();
        ReEnterPasswordField = new javax.swing.JPasswordField();
        CurrentPasswordField = new javax.swing.JPasswordField();
        manageStaffPanel = new javax.swing.JPanel();
        searchBoxVar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        addStaffButton = new javax.swing.JButton();
        editStaffButton = new javax.swing.JButton();
        archStaffButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        mainMenuButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Setttings");
        setPreferredSize(new java.awt.Dimension(763, 604));

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        notificatiionsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Automated Emails :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Email Content ");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Save Changes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mainMenuButtonNotification.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mainMenuButtonNotification.setText("main menu");
        mainMenuButtonNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonNotificationActionPerformed(evt);
            }
        });

        logOutNotification.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        logOutNotification.setText("log out");
        logOutNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutNotificationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout notificatiionsPanelLayout = new javax.swing.GroupLayout(notificatiionsPanel);
        notificatiionsPanel.setLayout(notificatiionsPanelLayout);
        notificatiionsPanelLayout.setHorizontalGroup(
            notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notificatiionsPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(notificatiionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(notificatiionsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(44, 44, 44)))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notificatiionsPanelLayout.createSequentialGroup()
                .addContainerGap(352, Short.MAX_VALUE)
                .addGroup(notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notificatiionsPanelLayout.createSequentialGroup()
                        .addComponent(mainMenuButtonNotification)
                        .addGap(18, 18, 18)
                        .addComponent(logOutNotification)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notificatiionsPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(342, 342, 342))))
        );
        notificatiionsPanelLayout.setVerticalGroup(
            notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notificatiionsPanelLayout.createSequentialGroup()
                .addGroup(notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainMenuButtonNotification)
                    .addComponent(logOutNotification))
                .addGap(22, 22, 22)
                .addGroup(notificatiionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(22, 22, 22)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGap(133, 133, 133)
                .addComponent(jButton1)
                .addGap(51, 51, 51))
        );

        jTabbedPane1.addTab("Notification Settings", notificatiionsPanel);

        accountDetailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        accountDetailsPanel.setPreferredSize(new java.awt.Dimension(540, 500));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("User ID:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("First Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Last Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Telephone No:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Email Address :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Current Password :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Enter new password :");

        firstNameField.setText("");
        firstNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameFieldFocusLost(evt);
            }
        });

        lastNameField.setText("");
        lastNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameFieldFocusLost(evt);
            }
        });

        UserIDField.setText("");
        UserIDField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserIDFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                UserIDFieldFocusLost(evt);
            }
        });

        telephoneNumberField.setText("");
        telephoneNumberField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                telephoneNumberFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                telephoneNumberFieldFocusLost(evt);
            }
        });

        emailField.setText("");
        emailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailFieldFocusLost(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("re-enter password :");

        saveChangesButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("save password");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        CurrentPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CurrentPasswordFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout accountDetailsPanelLayout = new javax.swing.GroupLayout(accountDetailsPanel);
        accountDetailsPanel.setLayout(accountDetailsPanelLayout);
        accountDetailsPanelLayout.setHorizontalGroup(
            accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDetailsPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CurrentPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(telephoneNumberField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserIDField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastNameField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EnterNewPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReEnterPasswordField, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountDetailsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveChangesButton)
                .addGap(344, 344, 344))
        );
        accountDetailsPanelLayout.setVerticalGroup(
            accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDetailsPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(9, 9, 9)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telephoneNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(CurrentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountDetailsPanelLayout.createSequentialGroup()
                        .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(EnterNewPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(accountDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(ReEnterPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(saveChangesButton)
                .addGap(29, 29, 29))
        );

        jTabbedPane1.addTab("My Account", accountDetailsPanel);

        searchBoxVar.setText("Search Staff Table :");

        searchBox.setForeground(new java.awt.Color(153, 153, 153));
        searchBox.setText("Enter search term here....");
        searchBox.setToolTipText("enter search term and press ENTER");
        searchBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBoxFocusGained(evt);
            }
        });
        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBoxKeyPressed(evt);
            }
        });

        StaffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Surname", "First Name", "ID", "Phone Number", "Email", "Staff Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StaffTable.setUpdateSelectionOnSort(true);
        jScrollPane2.setViewportView(StaffTable);

        addStaffButton.setToolTipText("click to add a new moderator");
        addStaffButton.setText("Add Staff Member");
        addStaffButton.setPreferredSize(new java.awt.Dimension(180, 25));
        addStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStaffButtonActionPerformed(evt);
            }
        });

        editStaffButton.setText("Edit Staff Member");
        editStaffButton.setPreferredSize(new java.awt.Dimension(180, 25));
        editStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStaffButtonActionPerformed(evt);
            }
        });

        archStaffButton.setText("Archive Staff Member");
        archStaffButton.setName(""); // NOI18N
        archStaffButton.setPreferredSize(new java.awt.Dimension(180, 25));
        archStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archStaffButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageStaffPanelLayout = new javax.swing.GroupLayout(manageStaffPanel);
        manageStaffPanel.setLayout(manageStaffPanelLayout);
        manageStaffPanelLayout.setHorizontalGroup(
            manageStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(manageStaffPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(addStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(archStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageStaffPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBoxVar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
        );
        manageStaffPanelLayout.setVerticalGroup(
            manageStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageStaffPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(manageStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBox)
                    .addComponent(searchBoxVar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addGap(39, 39, 39)
                .addGroup(manageStaffPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addStaffButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(editStaffButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(archStaffButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38))
        );

        jTabbedPane1.addTab("Manage Staff", manageStaffPanel);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Settings");

        mainMenuButton.setText("MAIN MENU");

        logoutButton.setText("LOGOUT");
        logoutButton.setPreferredSize(new java.awt.Dimension(113, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainMenuButton)
                .addGap(39, 39, 39)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(mainMenuButton)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
    //methods to clear text from the textfields after details have been saved
    public void clear()
    {
        firstNameField.setText("");
        lastNameField.setText("");
        UserIDField.setText("");
       	telephoneNumberField.setText("");
        emailField.setText("");
        CurrentPasswordField.setText("");
        ReEnterPasswordField.setText("");
        EnterNewPasswordField.setText("");
        
    }
    
    /**
     * checks if the current password matches,in any case they should be different,
     * checks if the re entered password matches the new password of which they should match
     * @return  true if current password does not match the new password
     */
    public boolean checkPassword()
    {
      password=new String(CurrentPasswordField.getPassword());  
      String newPassword=new String(EnterNewPasswordField.getPassword());
      String ReEnterPassword=new String(ReEnterPasswordField.getPassword());
      
      if(password.equalsIgnoreCase(newPassword))
      {
          JOptionPane.showMessageDialog(null, "Enter diferent password");
          EnterNewPasswordField.setText("");
          ReEnterPasswordField.setText("");
      }
      else if (!newPassword.equalsIgnoreCase(ReEnterPassword))
      {
          JOptionPane.showMessageDialog(null, "your re-entered password does not match the new password");
          ReEnterPasswordField.setText("");
      }
      else
      {
          password =newPassword;
          ReEnterPassword=newPassword;
          password=ReEnterPassword;
         
          return true;
      }
      return false;
        
    }
    /**
     * assigns the new password to current password after clicking on the save password button 
     * @return  password
     */
    public String password()
    {
      password=new String(CurrentPasswordField.getPassword());  
      String newPassword=new String(EnterNewPasswordField.getPassword());
      String ReEnterPassword=new String(ReEnterPasswordField.getPassword());
      
      password =newPassword;
      ReEnterPassword=newPassword; 
      password=ReEnterPassword;
      
      return password;
        
    }
    /**checks if all inputs are valid
     * @param flags array containing boolean values for the input fields
     * @return True if all are valid False otherwise
     */
    public boolean inputsValid(boolean[] inflags)
    {
        boolean b = true;
        for(boolean flag : inflags)
        {
            if(flag == false)
            {
                b = false;
                break;
            }
        }
        return b;    
    }
    public void  saveInfo()
    {
        name=firstNameField.getText();
        lastName=lastNameField.getText();
        UserID=UserIDField.getText();
        telephoneNumber=telephoneNumberField.getText();
        email=emailField.getText();
        password=new String(CurrentPasswordField.getPassword());
        
         DatabaseChangeUserInfo DB=new  DatabaseChangeUserInfo(filePath);
        
        if (checkPassword()==true&& inputsValid(flags)==true )
        {
             password=password();
             DB.changeUserDetails(name, lastName, email,  telephoneNumber,UserID, password);
             JOptionPane.showMessageDialog(null, "changes  Saved"); 
             clear();
        }
        else if((inputsValid(flags)==false))
        {
            JOptionPane.showMessageDialog(null, "enter valid inputs in highlighted texts"); 
            //inputsValid(flags);
        }  
       else
        {
            JOptionPane.showMessageDialog(null, "enter valid inputs in highlighted texts");
        }
               
     }
    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  

      saveInfo(); 
    }                                                 

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
      if (checkPassword()==true)
      {
           JOptionPane.showMessageDialog(null, "Password Saved");      
      }
      
    }                                        

    private void firstNameFieldFocusLost(java.awt.event.FocusEvent evt) {                                         
        // TODO add your handling code here:
         
        String fnameRegex = "[a-zA-Z]+";
        if((firstNameField.getText().matches(fnameRegex)))
        {
             flags[0] = true;
        }
        else
        {            
            firstNameField.setForeground(Color.RED);
            flags[0] = false; 
        }
    }                                        

    private void lastNameFieldFocusGained(java.awt.event.FocusEvent evt) {                                          
        // TODO add your handling code here:
        lastNameField.setForeground(Color.BLACK);
        lastNameField.setText(lastName);
        lastNameField.requestFocus();
        lastNameField.selectAll();
    }                                         

    private void firstNameFieldFocusGained(java.awt.event.FocusEvent evt) {                                           
        // TODO add your handling code here:
        firstNameField.setForeground(Color.BLACK);
        //firstNameField.setText(""); 
        firstNameField.requestFocus();
        firstNameField.selectAll();
    }                                          

    private void lastNameFieldFocusLost(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:
         String snameRegex = "[a-zA-Z]+";
        if((lastNameField.getText().matches(snameRegex)))
        {
            flags[1] = true;
        }
        else
        {            
            lastNameField.setForeground(Color.RED);
            flags[1] = false;
        }
    }                                       

    private void UserIDFieldFocusLost(java.awt.event.FocusEvent evt) {                                      
        // TODO add your handling code here:
        
         String idRegex = "[a-zA-Z]{1}\\d{7}$";
        if((UserIDField.getText().matches(idRegex)))
        {
             flags[2] = true;
        }
        else
        {            
            UserIDField.setForeground(Color.RED);
            flags[2] = false; 
        }
    }                                     

    private void UserIDFieldFocusGained(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:
        UserIDField.setForeground(Color.BLACK);
        UserIDField.setText(UserID); 
        UserIDField.requestFocus();
        UserIDField.selectAll();
    }                                       

    private void telephoneNumberFieldFocusLost(java.awt.event.FocusEvent evt) {                                               
        // TODO add your handling code here:
       
            String NumRegex = "(\\+|00)?(44)?([\\d]{10,11})";
           if((telephoneNumberField.getText().matches(NumRegex)))
           {
                flags[3] = true;
           }
           else
           {            
                telephoneNumberField.setForeground(Color.RED);
                flags[3] = false;
           }     
    }                                              

    private void telephoneNumberFieldFocusGained(java.awt.event.FocusEvent evt) {                                                 
        // TODO add your handling code here:
       telephoneNumberField.setForeground(Color.BLACK);
       telephoneNumberField.setText(telephoneNumber);
       telephoneNumberField.requestFocus();
       telephoneNumberField.selectAll();
    }                                                

    private void emailFieldFocusGained(java.awt.event.FocusEvent evt) {                                       
        // TODO add your handling code here:
       emailField.setForeground(Color.BLACK);
       emailField.setText(email);
      // emailField.requestFocus();
       emailField.selectAll();
      
    }                                      

    private void emailFieldFocusLost(java.awt.event.FocusEvent evt) {                                     
        // TODO add your handling code here:
        
       String emailRegex = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
		+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
        if((emailField.getText().matches(emailRegex)))
        {
            flags[4] = true;
        }
        else
        {            
            emailField.setForeground(Color.RED);
            flags[4] = false;
        }    
    }                                    

    private void CurrentPasswordFieldFocusGained(java.awt.event.FocusEvent evt) {                                                 
        // TODO add your handling code here:
        CurrentPasswordField.setForeground(Color.BLACK);
        CurrentPasswordField.setText(password);
        CurrentPasswordField.requestFocus();
        CurrentPasswordField.selectAll();
       
    }                                                

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void mainMenuButtonNotificationActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        // TODO add your handling code here:
        nextState=0;
    }                                                          

    private void logOutNotificationActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        nextState=-1;
    }                                                  

    private void searchBoxFocusGained(java.awt.event.FocusEvent evt) {                                      
        searchBox.setText(null);
        searchBox.setForeground(Color.BLACK);
        //StaffTable.setRowSorter(null);
        StaffTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");
    }                                     

    private void searchBoxKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            search();
        }
    }                                    

    private void addStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        AddStaff jdog = new AddStaff();
        jdog.setVisible(true);
        jdog.setAlwaysOnTop(true);

        //update the table after adding user
        jdog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {

                searchBox.requestFocus();
                populateTable();
            }
        });
    }                                              

    private void editStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        int row = StaffTable.getSelectedRow();

        if (row > -1) {
            ArrayList rowData = getRowDetails(row);
            ((DefaultTableModel) StaffTable.getModel()).removeRow(row);
            deleteEntryFromDatabase();
            EditStaff jdog2 = new EditStaff(rowData);
            jdog2.setVisible(true);
            jdog2.setAlwaysOnTop(true);

            //update the table after adding user
            jdog2.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {

                    searchBox.requestFocus();
                    populateTable();

                }
            });

        }else{
            JOptionPane.showMessageDialog(null, "Please select entry to edit", "No rows selected", JOptionPane.PLAIN_MESSAGE);
        }

    }                                               

    private void archStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        int row = StaffTable.convertRowIndexToModel(StaffTable.getSelectedRow());

        if (row > -1) {
            try {
                ((DefaultTableModel) StaffTable.getModel()).removeRow(row);

                searchBox.requestFocus();
                deleteEntryFromDatabase();
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select entry to archive", "No rows selected", JOptionPane.PLAIN_MESSAGE);
        }
    }                                               

    //#################################### start MANAGE STAFF BACK-END  #########################################################
    
      public final void myInitComponents() {
        //set window to middle of computer screen
        setLocationRelativeTo(null);

        //make user table first component to gain focus during runtime
        StaffTable.requestFocusInWindow();
        //indicate to user that table is showing all results in database
        StaffTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");

    }
    
    /**Fills the table with data from text file based database*/
    public final void populateTable() {
        //open the database and get the staff table
        StaffDatabase sdb = new StaffDatabase();
        File staff = sdb.getStaffTable();

        DefaultTableModel tm = (DefaultTableModel) StaffTable.getModel();
        //refreshes table when new data is added
        tm.getDataVector().removeAllElements();

        //read the file line by line into the table       
        try (BufferedReader br = new BufferedReader(new FileReader(staff))) {

            String line;//an entry in the database

            while ((line = br.readLine()) != null) {
                tm.addRow(line.split(","));
            }
            br.close();

        } catch (FileNotFoundException e) {
            System.out.println("Error : could not open the file - " + staff);
        } catch (IOException e) {
            System.out.println("Error : problem encountered while reading file - " + staff);
        }
    }
    
     /**This search shrinks the table to display only the rows that
     *have a field matching the search term entered in the searchBox
     */
    public void search() {
        
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(StaffTable.getModel());
        StaffTable.setRowSorter(rowSorter);

        String searchTerm = searchBox.getText();
        StaffTable.setToolTipText("SHOWING ENTRIES CONTAINING USER ENTERED SEARCH TERM >>> " + "'" + searchTerm + "'");

        if (searchTerm.isEmpty()) {
            searchResultMessage(2);
             rowSorter.setRowFilter(null);
            return;
        }
        //display entries matching search term only
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchTerm));
                
        //reset display if no entries match search term
        if (StaffTable.getRowCount() == 0) {
            searchResultMessage(1);
            rowSorter.setRowFilter(null);
            StaffTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");
        }
    }

    /**message to be displayed if search term does not match anything or is null
     * @param n select which message to display*/
    public void searchResultMessage(int n) {
        
        String noMatch = "Search term did not match any field in the table."
                + "\n         Please try a different search term";
        
        String emptySearch = "No search term entered. Please enter a valid search term";
        
        if (n == 1) {
            JOptionPane.showMessageDialog(null, noMatch, "No matching Results", JOptionPane.PLAIN_MESSAGE);
        }
        if (n == 2) {
            JOptionPane.showMessageDialog(null, emptySearch, "No matching Results", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    
    public void deleteEntryFromDatabase() {

        StaffDatabase sdb = new StaffDatabase();
        File staff = sdb.getStaffTable();
        File tempFile = new File("temp.txt");
        
        int rows = StaffTable.getRowCount();
        int columns = StaffTable.getColumnCount();

        try {
            FileWriter out = new FileWriter(tempFile);
            for (int i = 0; i < rows; i++) {
                String existingRow = "";
                for (int j = 0; j < columns; j++) {
                    existingRow += StaffTable.getValueAt(i, j).toString() + ",";
                }
                int last = existingRow.length() - 1;
                out.write(existingRow.substring(0, last));
                out.write("\n");
            }
            out.close();
            staff.delete();
            tempFile.renameTo(staff);

        } catch (FileNotFoundException e) {
            System.out.println("Error : could not open the file - " + staff);
        } catch (IOException e) {
            System.out.println("Error : problem encountered while reading file - " + staff);
        }
    }
    
    
    public ArrayList getRowDetails(int row){
        
        rowDetails = new ArrayList<>();        
        int columns = StaffTable.getColumnCount();
        
        for(int col = 0; col < columns; col++){  
            String val = (String)StaffTable.getValueAt(row, col);
            System.out.println(val);
            rowDetails.add(val);
        }  
        System.out.println("Row pos : "+row +" Row details :"+rowDetails.size());
        
        
        return rowDetails;
    }

 //#################################### end MANAGE STAFF BACK END #############################################################   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(msettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(msettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(msettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(msettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      //  ActionListener listener=new ActionListener();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new msettingsUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPasswordField CurrentPasswordField;
    private javax.swing.JPasswordField EnterNewPasswordField;
    private javax.swing.JPasswordField ReEnterPasswordField;
    public final javax.swing.JTable StaffTable = new javax.swing.JTable();
    private javax.swing.JTextField UserIDField;
    private javax.swing.JPanel accountDetailsPanel;
    private javax.swing.JButton addStaffButton;
    private javax.swing.JButton archStaffButton;
    private javax.swing.JButton editStaffButton;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JButton logOutNotification;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JButton mainMenuButtonNotification;
    private javax.swing.JPanel manageStaffPanel;
    private javax.swing.JPanel notificatiionsPanel;
    private javax.swing.JButton saveChangesButton;
    private final javax.swing.JTextField searchBox = new javax.swing.JTextField();
    private javax.swing.JLabel searchBoxVar;
    private javax.swing.JTextField telephoneNumberField;
    // End of variables declaration                   

}
